namespace Warehouse
 {
     public class Storage
     {
         private List<Car> cars = new List<Car>();
         private List<Order> orders = new List<Order>();
         private List<Order> sendingOrders = new List<Order>();
         public class Car
         {
             public string Name { get; set; }
             public string Manufactory { get; set; }
             public int Count { get; set; }
             
         }

         public class Order
         {
             public string Name { get; set; }
             public string Manufactory { get; set; }
             public int Count { get; set; }
             public string Place { get; set; }
         }
         // метод який добавляє машинку на склад
         public void AddCarToStorage(Car newCar)
         {
             Console.Write("Name: ");
             newCar.Name = Console.ReadLine();
             Console.Write("Manufactory: ");
             newCar.Manufactory = Console.ReadLine();
             Console.Write("Count: ");
             if (!int.TryParse(Console.ReadLine(), out int count))
             {
                 Console.WriteLine("Invalid count. Setting count to 0.");
                 newCar.Count = 0;
             }
             else
             {
                 newCar.Count = count;
             }
             cars.Add(newCar);
         }
         // метод який подає замовлення постачальнику на заповнення скалду певними машинами
         public void GetOrdersForIncomingCar(Order order)
         {
             Console.Write("\n Please fill out a short form for a new order ");
             Console.Write("\nEnter car name: ");
             order.Name = Console.ReadLine()?.Trim();
             Console.Write("\nEnter car manufactory: ");
             order.Manufactory = Console.ReadLine()?.Trim();
             Console.Write("\nEnter car count: ");
             order.Count = Convert.ToInt32(Console.ReadLine()?.Trim());
             orders.Add(order);
         }
         // метод який буде відправляти машини замовникам і коли всі умови виконанаі видаляє машинку з масиву
         public void GetOrdersForSendingCar(Order orderS)
         {
             Console.Write("\n Please fill out a short form for a new order ");
             Console.Write("\nEnter car name: : ");
             orderS.Name = Console.ReadLine()?.Trim();
             Console.Write("\nEnter car manufactory: ");
             orderS.Manufactory = Console.ReadLine()?.Trim();
             Console.Write("\nEnter car count: ");
             orderS.Count = Convert.ToInt32(Console.ReadLine()?.Trim());
             Console.Write("\nEnter place name: ");
             orderS.Place = Console.ReadLine()?.Trim();
             
             var car = cars.FirstOrDefault(c => c.Name == orderS.Name && c.Manufactory == orderS.Manufactory);
    
             if(car != null)
             {
                 if(car.Count >= orderS.Count)
                 {
                     car.Count -= orderS.Count; 
                     
                     if(car.Count == 0)
                     {
                         cars.Remove(car);
                     }
            
                     sendingOrders.Add(orderS);
                     Console.WriteLine("Order successfully added and cars reserved.");
                 }
                 else
                 {
                     Console.WriteLine($"Error: Not enough cars in stock. Available: {car.Count}, Requested: {orderS.Count}");
                 }
             }
             else
             {
                 Console.WriteLine("Error: Car not found in storage!");
             }
             
         }
         // метод який дозволяє отримати машинку за замовленням 
         public void RecieveCar()
         {
             Console.WriteLine("\nEnter details of received cars:");
             Console.Write("Name: ");
             string name = Console.ReadLine()?.Trim();
             Console.Write("Manufactory: ");
             string manufactory = Console.ReadLine()?.Trim();
             Console.Write("Count: ");
             int count;
             if (!int.TryParse(Console.ReadLine(), out count))
             {
                 Console.WriteLine("Invalid count input.");
                 return;
             }
             
             var order = orders.FirstOrDefault(o => 
                 o.Name == name && 
                 o.Manufactory == manufactory);

             if (order != null)
             {
                 if (count >= order.Count)
                 {
                     var existingCar = cars.FirstOrDefault(c => 
                         c.Name == name && 
                         c.Manufactory == manufactory);

                     if (existingCar != null)
                     {
                         existingCar.Count += count;
                     }
                     else
                     {
                         cars.Add(new Car
                         {
                             Name = name,
                             Manufactory = manufactory,
                             Count = count
                         });
                     }
                     
                     orders.Remove(order);
                     Console.WriteLine("Order fulfilled and cars added to storage!");
                 }
             }
             else
             {
                 Console.WriteLine("Error: Car not found in orders!");
             }
         }
         // метод який показує які є машинки на складі
         public void ShowCars()
         {
             Console.Write("\nAvailable cars: ");
             foreach (var car in cars)
             {
                 Console.WriteLine($"Model: {car.Name}");
                 Console.WriteLine($"Manufactory: {car.Manufactory}");
                 Console.WriteLine($"Count: {car.Count}");
                 Console.WriteLine("----------------");
             }
         }
         
         static void Main(string[] args)
         {
             var storage = new Storage();
             while (true)
             {
                 Console.WriteLine("\nSystem for warhouse:");
                 Console.WriteLine("1 - Add car to the storage");
                 Console.WriteLine("2 - Create order for incoming cars");
                 Console.WriteLine("3 - Create order for sending cars");
                 Console.WriteLine("4 - Get cars from orders");
                 Console.WriteLine("5 - Show available cars");
                 Console.WriteLine("6 - Exit");

                 var choice = Console.ReadLine();

                 switch (choice)
                 {
                     case "1":
                         storage.AddCarToStorage(new Car());
                         break;

                     case "2":
                         storage.GetOrdersForIncomingCar(new Order());
                         break;
                     case "3":
                         storage.GetOrdersForSendingCar(new Order());
                         break;
                     
                     case "4":
                         storage.RecieveCar();
                         break;
                     
                     case "5":
                         storage.ShowCars();
                         break;
                     
                     case "6":
                         return;
                 }
             }
         }
     }
 }
