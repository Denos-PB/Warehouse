using System; using System.Collections.Generic;
 using System.Text; using System.Threading.Tasks;
 using System;
 using System.Threading.Channels;

 /*Почнемо з систему складу, який вміє:
- зберігати машинки +
- лишати замовлення на поставку нових +
- отримувати нові
- отримувати замовлення на відправку 
- відправляти старі. 
Також, він має вміти сказати, які в нього зараз є позиції, яких позицій зараз немає на складі. 
*/// Завдання:
// 1. створити клас Storage +
// 2. Створити метод який зберігатиме машинки +
// 3. Створити метод який буде робити форму яка модель хто замовник кількіст до якого часу звідки умовно
// 4. ВВодмлку що прибуло кількість час чи покрило замовлення звідки статус нова (заповнювати вручну)
// 5. 
 namespace Vehicle
 {
     public class Storage
     {
         public class Car
         {
             public string Name { get; set; }
             public string Manufactory { get; set; }
             public int Count { get; set; }
             
             public void Deconstruct(out string name, out string manufactory, out int count)
             {
                 name = Name;
                 manufactory = Manufactory;
                 count = Count;
             }
         }

         public class Order
         {
             public string Company { get; set; }
             public string Name { get; set; }
             public string Manufactory { get; set; }
             public int Count { get; set; }
             public string Time {get;set;}
             public string Place { get; set; }
             
             public void Deconstruct(out string name, out string manufactory, out int count, out string time, out string place, out string company)
             {
                 name = Name;
                 manufactory = Manufactory;
                 count = Count;
                 time = Time;
                 place = Place;
                 company = Company;
             }
         }

         static Car[] GetCarsFromUser()
         {
             Console.Write("Enter the number of cars: ");
             if (!int.TryParse(Console.ReadLine(), out int n))
             {
                 Console.WriteLine("Invalid input. Please enter a number.");
                 return null;
             }

             Car[] cars = new Car[n];
             for (int i = 0; i < n; i++)
             {
                 cars[i] = new Car();
                 Console.WriteLine($"\n Enter information about car {i + 1}:");
                 Console.Write("Name: ");
                 cars[i].Name = Console.ReadLine();
                 Console.Write("Manufactory: ");
                 cars[i].Manufactory = Console.ReadLine();
                 Console.Write("Count: ");
                 if (!int.TryParse(Console.ReadLine(), out int count))
                 {
                     Console.WriteLine("Invalid count. Setting count to 0.");
                     cars[i].Count = 0;
                 }
                 else
                 {
                     cars[i].Count = count;
                 }
             }
             return cars;
         }

         static Order GetOrdersFromUser()
         {
             Order order = new Order();
             Console.WriteLine("\n Please fill out a short form for a new order ");
             Console.WriteLine("\nEnter your company name: ");
             order.Company = Console.ReadLine();
             Console.WriteLine("\nEnter car name: : ");
             order.Name = Console.ReadLine()?.Trim();
             Console.WriteLine("\nEnter car manufactory: ");
             order.Manufactory = Console.ReadLine()?.Trim();
             Console.WriteLine("\nEnter car count: ");
             order.Count = Convert.ToInt32(Console.ReadLine()?.Trim());
             Console.WriteLine("\nEnter order time(format: dd/mm/yyyy): ");
             order.Time = Console.ReadLine()?.Trim();
             Console.WriteLine("\nEnter place name: ");
             order.Place = Console.ReadLine()?.Trim();
             
             return order;
         }
         

         // private static void DisplayOrder(Order order)
         // {
         //     Console.WriteLine("\n=== Order confirmation ===");
         //     Console.WriteLine($"\nCustomer company name: {order.Company}");
         //     Console.WriteLine($"\nCar model: {order.Name}");
         //     Console.WriteLine($"\nManufacture: {order.Manufactory}");
         //     Console.WriteLine($"\nQuantity: {order.Count}");
         //     Console.WriteLine($"\nDelivery date: {order.Time}");
         //     Console.WriteLine($"\nPlace name: {order.Place}");
         //     Console.WriteLine("==============================");
         // }
         
         static List<Order> GetMultipleOrders()
         {
             List<Order> orders = new List<Order>();
             bool continueOrdering = true;

             while (continueOrdering)
             {
                 orders.Add(GetOrdersFromUser());
        
                 Console.Write("\nWould you like to add another order? (Yes/No): ");
                 continueOrdering = Console.ReadLine()?.Trim().ToLower() == "yes";
             }

             return orders;
         }

         static Car GetIncomingCar()
         {
             
         }

         static void Main(string[] args)
         {
             Car[] cars = GetCarsFromUser();
             List<Order> orders = GetMultipleOrders();
         }
     }
 }
